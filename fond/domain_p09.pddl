; MAPF/DU domain (FOND version) with 8 worlds for 3 agents
; Author: Thorsten Engesser
(define (domain mapfdu_3_agents)
  (:types agt world pos)
  (:constants w0 w1 w2 w3 w4 w5 w6 w7 - world)
  (:predicates
    (at ?a - agt ?p - pos)
    (adj ?p1 ?p2 - pos)
    (stopped ?a - agt)
    (goal ?w - world ?a - agt ?p - pos)
    (ind ?a - agt ?w1 ?w2 - world)
    (des ?w - world)
    (next-choose)
    (next-move ?a - agt ?p1 ?p2 - pos)
    (next-annc ?a - agt ?p - pos))
  (:action choose-move ; UNFAIR ACTION!
     :parameters (?a - agt ?w - world ?p1 ?p2 - pos)
     :precondition (and (des ?w) (next-choose)
                        (at ?a ?p1) (adj ?p1 ?p2)
                        (not (exists (?a2 - agt) (at ?a2 ?p2)))
                        (not (stopped ?a)))
     :effect (and (next-move ?a ?p1 ?p2) (not (next-choose))
                  (oneof 
                         (when (and (ind ?a ?w w0) (not (= ?w w0)))
                               (and (not (des ?w)) (des w0)))
                         (when (and (ind ?a ?w w1) (not (= ?w w1)))
                               (and (not (des ?w)) (des w1)))
                         (when (and (ind ?a ?w w2) (not (= ?w w2)))
                               (and (not (des ?w)) (des w2)))
                         (when (and (ind ?a ?w w3) (not (= ?w w3)))
                               (and (not (des ?w)) (des w3)))
                         (when (and (ind ?a ?w w4) (not (= ?w w4)))
                               (and (not (des ?w)) (des w4)))
                         (when (and (ind ?a ?w w5) (not (= ?w w5)))
                               (and (not (des ?w)) (des w5)))
                         (when (and (ind ?a ?w w6) (not (= ?w w6)))
                               (and (not (des ?w)) (des w6)))
                         (when (and (ind ?a ?w w7) (not (= ?w w7)))
                               (and (not (des ?w)) (des w7))))))
  (:action choose-announce ; UNFAIR ACTION!
     :parameters (?a - agt ?w - world ?p - pos)
     :precondition (and (des ?w) (next-choose)
                        (at ?a ?p) (goal ?w ?a ?p)
                        (not (stopped ?a)))
     :effect (and (next-annc ?a ?p) (not (next-choose))
                  (oneof 
                         (when (and (ind ?a ?w w0) (not (= ?w w0)))
                               (and (not (des ?w)) (des w0)))
                         (when (and (ind ?a ?w w1) (not (= ?w w1)))
                               (and (not (des ?w)) (des w1)))
                         (when (and (ind ?a ?w w2) (not (= ?w w2)))
                               (and (not (des ?w)) (des w2)))
                         (when (and (ind ?a ?w w3) (not (= ?w w3)))
                               (and (not (des ?w)) (des w3)))
                         (when (and (ind ?a ?w w4) (not (= ?w w4)))
                               (and (not (des ?w)) (des w4)))
                         (when (and (ind ?a ?w w5) (not (= ?w w5)))
                               (and (not (des ?w)) (des w5)))
                         (when (and (ind ?a ?w w6) (not (= ?w w6)))
                               (and (not (des ?w)) (des w6)))
                         (when (and (ind ?a ?w w7) (not (= ?w w7)))
                               (and (not (des ?w)) (des w7))))))
  (:action move
     :parameters (?a - agt ?w - world ?p1 ?p2 - pos)
     :precondition (and (des ?w) (next-move ?a ?p1 ?p2))
     :effect (and (not (at ?a ?p1)) (at ?a ?p2)
                  (not (next-move ?a ?p1 ?p2))
                  (next-choose)))
  (:action announce
     :parameters (?a - agt ?w - world ?p - pos)
     :precondition (and (des ?w) (next-annc ?a ?p)
                        (goal ?w ?a ?p))
     :effect (and (stopped ?a)
                  (not (next-annc ?a ?p)) (next-choose)
                  (forall (?w1 ?w2 - world ?a1 - agt)
                          (when (not (goal ?w1 ?a ?p))
                                (and (not (ind ?a1 ?w1 ?w2))
                                     (not (ind ?a1 ?w2 ?w1))))))))
